********************************************************************************************************************************************************************
                                                                        Apple Sequences
********************************************************************************************************************************************************************

GFG Link:- https://practice.geeksforgeeks.org/problems/38f100615d0b2efa755e7b07f905e0f8cd2fe5df/1


There is a string of size n containing only 'A' and 'O'. 'A' stands for Apple, and 'O' stands for Orange. We have m number of spells, each spell allows us to convert an orange into an apple.

Find the longest sequence of apples you can make, given a string and the value of m.


Example 1:

Input:
N = 5
M = 1
arr[] = 'AAOAO'
Output: 4 
Explanation: Changing the orange at 
3rd position into an apple gives 
us the maximum possible answer.

Example 2:

Input:
N = 5
M = 1
arr = 'AOOAO'
Output: 2
Explanation: Changing any orange into 
an apple will give us a sequence 
of length 2.

Your Task:  
You don't need to read input or print anything. Your task is to complete the function appleSequence() which takes the array in the form of a string, its size n, and an integer m as input parameters and returns the largest apple sequences after converting m oranges.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= m <= n <= 106



********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class Solution{
    public static int appleSequence(int n, int m, String arr){
        //STEPS FOR SOLUTION:-
        //1)Take two pointers i and j- i will be pointing to the start of the window and j will be pointing to the end
        //2)Also, take a variable count which will be counting no. of oranges
        //3)Use a while loop which will run until j<n
        //4)For every jth char, check if it is oranges- if it is then increment count
        //5)If the no. of oranges(count) becomes greater than m then we need to smaller the window
        //6)Simulataneouly also calculate the max length of the window- at the end of loop return this max length
        
        
        int i=0, j=0;
        int count= 0;
        int result= 0;
        
        while(j<n)
        {
           char ch= arr.charAt(j);
           if(ch=='O')
                count++;
            
           if(i<n && count>m)
           {
               if(arr.charAt(i)=='O')
                    count--;
               i++;
           }
           
           result= Math.max(result,j-i+1);
           j++;
           
        }
        
        return result;
    }
}
