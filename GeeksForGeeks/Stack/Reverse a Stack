********************************************************************************************************************************************************************
                                                                        Reverse a Stack
********************************************************************************************************************************************************************

GFG Link:- https://practice.geeksforgeeks.org/problems/reverse-a-stack/1


You are given a stack St. You have to reverse the stack using recursion.

Example 1:

Input:
St = {3,2,1,7,6}
Output:
{6,7,1,2,3}
Example 2:

Input:
St = {4,3,9,6}
Output:
{6,9,3,4}
Your Task:

You don't need to read input or print anything. Your task is to complete the function Reverse() which takes the stack St as input and returns the reversed stack.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

Constraints:
1 <= size of the stack <= 104
-109 <= Each element of the stack <= 109
Sum of N over all test cases doesn't exceeds 106
Array may contain duplicate elements. 



********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

//User function Template for Java

class Solution
{ 
    static void reverse(Stack<Integer> s)
    {
        //if stack is empty returning the stack as it is
        if(s.isEmpty())
            return;
            
        //finding peek element of stack and sending value and reversed stack to put function
        int tmp= s.pop();
        reverse(s);
        put(tmp,s);
    }
    static void put(int tmp, Stack<Integer> s)
    {
        //if stack is empty then we will simply push the element into stack
        if(s.isEmpty())
        {
            s.push(tmp);
            return;
        }
        //else if stack is not empty then using recursion we are emptying the stack and one by one adding stack's peek element
        else
        {
            int val= s.pop();
            put(tmp,s);
            s.push(val);
        }
    }
}
