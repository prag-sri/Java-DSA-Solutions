********************************************************************************************************************************************************************
                                                                         Common Elements
********************************************************************************************************************************************************************

GFG Link:- https://practice.geeksforgeeks.org/problems/common-elements5420/1?page=7&status[]=unsolved&curated[]=1&sortBy=submissions


Given two lists V1 and V2 of sizes n and m respectively. Return the list of elements common to both the lists and return the list in sorted order. Duplicates may be there in the output list.

Example:

Input:
n = 5
v1[] = {3, 4, 2, 2, 4}
m = 4
v2[] = {3, 2, 2, 7}
Output:
2 2 3
Explanation:
The common elements in sorted order are {2 2 3}
Your Task:
This is a function problem. You need to complete the function common_element that takes both the lists as parameters and returns a list of common elements.

Constraints:
1 ≤ n, m ≤ 105
1 ≤ Vi ≤ 105



********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

//User function Template for Java

class Solution{
    public static ArrayList<Integer> common_element(int v1[], int v2[])
    {
        HashMap<Integer,Integer> map= new HashMap<>();
        for(int i=0; i<v1.length; i++)
            map.put(v1[i],map.getOrDefault(v1[i],0)+1);
            
        ArrayList<Integer> result= new ArrayList<>();
        for(int i=0; i<v2.length; i++)
        {
            if(map.containsKey(v2[i]))
            {
                result.add(v2[i]);
                if(map.get(v2[i])==1)
                    map.remove(v2[i]);
                else
                    map.put(v2[i],map.get(v2[i])-1);
            }
        }
        Collections.sort(result);
        return result;
    }
}
