
********************************************************************************************************************************************************************
                                                                    Maximum Triplet product
********************************************************************************************************************************************************************

GFG Link:- https://practice.geeksforgeeks.org/problems/d54c71dc974b7db3a200eb63f34e3d1cba955d86/1

Given an array arr of size n, the task is to find the maximum triplet product in the array.


Example 1:

Input:
n = 4
arr[] = {1, 2, 3, 5}
Output:
30
Explanation:
5*3*2 gives 30. This is the maximum possible
triplet product in the array.
Example 2:

Input:
n = 7
arr[] = {-3, -5, 1, 0, 8, 3, -2} 
Output:
120
Explanation: 
-3*-5*8 gives 120. This is the maximum possible triplet product in the array.

Your Task:
You don't need to read input or print anything. Your task is to complete the function maxTripletProduct() which takes an integer n and an array arr and returns the maximum triplet product in the array.


Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)


Constraints:
3 ≤ N ≤ 5*105
-106 ≤ A[i] ≤ 106


********************************************************************************************************************************************************************
                                                                               CODE- APPROACH 1
********************************************************************************************************************************************************************

class Solution {
    Long maxTripletProduct(Long arr[], int n)
    {
        Long maxProduct= Long.MIN_VALUE;
        for(int i=0; i<n; i++)
        {
            for(int j=i+1; j<n; j++)
            {
                for(int k=j+1; k<n; k++)
                    maxProduct= Math.max(maxProduct,arr[i]*arr[j]*arr[k]);
            }
        }
        return maxProduct;
    }
}



********************************************************************************************************************************************************************
                                                                               CODE- APPROACH 2
********************************************************************************************************************************************************************

class Solution {
    Long maxTripletProduct(Long arr[], int n)
    {
        //Case 1 :- a,b & c all are maximum possible value. 
        //      {p1 = 2*2*4 Considering all 3 maximum of array }.

        //Case 2 :- 2 number is most smallest & 1 is largest 
        //          {p2= -5*-3*4 Considering 2 least elements & 1 largest}.
        
        long max1= Integer.MIN_VALUE;
        long max2= Integer.MIN_VALUE;
        long max3= Integer.MIN_VALUE;
        
        long min1= Integer.MAX_VALUE;
        long min2= Integer.MAX_VALUE;
        
        for(int i=0; i<n; i++)
        {
            if(arr[i]>=max1)
            {
                max3= max2;
                max2= max1;
                max1= arr[i];
            }
            else if(arr[i]>=max2)
            {
                max3= max2;
                max2= arr[i];
            }
            else if(arr[i]>=max3)
            {
                max3= arr[i];
            }
            
            if(arr[i]<=min1)
            {
                min2= min1;
                min1= arr[i];
            }
            else if(arr[i]<=min2)
            {
                min2= arr[i];
            }
        }
        //  System.out.println(max1+" "+max2+" "+max3+" "+min1+" "+min2);
        return Math.max(max1*max2*max3,min1*min2*max1);
    }
}
