********************************************************************************************************************************************************************
                                                                 Find anagrams in linked list
********************************************************************************************************************************************************************

GFG Link:- https://practice.geeksforgeeks.org/problems/de6f6a196aecdfb3e4939ba7729809a5a4bdfe90/1


Given a linked list of characters and a string S.Return all the anagrams of the string present in the given linked list.In case of overlapping anagrams choose the first anagram from left.

Example 1:

Input: a -> b -> c -> a -> d -> b -> c -> a
S = bac
Output: [a -> b -> c, b -> c -> a]
Explanation: In the given linked list,
there are three anagrams: 
1. a -> b -> c -> a -> d -> b -> c -> a
2. a -> b -> c -> a -> d -> b -> c -> a
3. a -> b -> c -> a -> d -> b -> c -> a
But in 1 and 2, a -> b -> c and b -> c-> a
are ovelapping.So we take a -> b -> c as it
comes first from left.So the output is:
[a->b->c,b->c->a]
Example 2:

Input: a -> b -> d -> c -> a
S = bac
Output: -1 
Explanation: There is no anagrams, so output is -1
Your Task:
You don't need to read input or print anything. Your task is to complete the function findAnagrams() which takes head node of the linked list and a string S as input parameters and returns an array of linked list which only stores starting point of the Anagram. If there is no anagram in the linked list,return -1.


Expected Time Complexity: O(N), where N is length of LinkedList
Expected Auxiliary Space: O(1)


Constraints:
1 <= N <= 105
1 <= |S| <= 105



********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

// User function Template for Java
/*

Definition for singly Link List Node
class Node
{
    char data;
    Node next;

    Node(char x){
        data = x;
        next = null;
    }
}

You can also use the following for printing the link list.
Node.printList(Node node);
*/

class Solution {
    public static boolean isAnagram(int[] arr1, int[] arr2){
        for(int i=0; i<26; i++)
        {
            if(arr1[i]!=arr2[i])
                return false;
        }
        return true;
    }
    public static ArrayList<Node> findAnagrams(Node head, String s) {
        ArrayList<Node> ansList= new ArrayList<>();
        int arr1[]= new int[26];
        int arr2[]= new int[26];
        
        int n= s.length();
        for(int i=0; i<s.length(); i++)
        {
            char ch= s.charAt(i);
            arr1[ch-'a']++;
        }
        
        int count=0;
        Node start= head;
        Node end= head;
        while(end!=null)
        {
            count++;
            char ch= end.data;
            arr2[ch-'a']++;
            
            if(count==n)
            {
                if(isAnagram(arr1,arr2))
                {
                    Node nxt= end.next;
                    end.next= null;
                    ansList.add(start);
                    
                    start= nxt;
                    end= nxt;
                    count=0;
                    
                    Arrays.fill(arr2,0);
                }
                else
                {
                    char ch1= start.data;
                    arr2[ch1-'a']--;
                    start= start.next;
                    end= end.next;
                    count--;
                }
            }
            else
                end= end.next;
        }
        
        return ansList;
    }
}
