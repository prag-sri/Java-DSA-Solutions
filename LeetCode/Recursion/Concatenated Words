********************************************************************************************************************************************************************
                                                                        Concatenated Words
********************************************************************************************************************************************************************

LeetCode Link:- https://leetcode.com/problems/concatenated-words/description/


Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.

A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.

 

Example 1:

Input: words = ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]
Output: ["catsdogcats","dogcatsdog","ratcatdogcat"]
Explanation: "catsdogcats" can be concatenated by "cats", "dog" and "cats"; 
"dogcatsdog" can be concatenated by "dog", "cats" and "dog"; 
"ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".
Example 2:

Input: words = ["cat","dog","catdog"]
Output: ["catdog"]
 

Constraints:

1 <= words.length <= 104
1 <= words[i].length <= 30
words[i] consists of only lowercase English letters.
All the strings of words are unique.
1 <= sum(words[i].length) <= 105




********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class Solution {
    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        int n= words.length;
        HashMap<String,Integer> map= new HashMap<>();
        for(int i=0; i<n; i++)
            map.put(words[i],1);

        List<String> res= new ArrayList<>();
        
        for(int i=0; i<n; i++)
        {
            if(check(words[i],map))
                res.add(words[i]);
        }
        return res;
    }
    public boolean check(String word, HashMap<String,Integer> map)
    {
        for(int i=1; i<word.length(); i++)
        {
            String prefix= word.substring(0,i);
            String suffix= word.substring(i,word.length());
            if(map.containsKey(prefix) && (map.containsKey(suffix) || check(suffix,map)))
                return true;
        }
        return false;
    }
}
