********************************************************************************************************************************************************************
                                                                       Longest Happy Prefix
********************************************************************************************************************************************************************

LeetCode Link:- https://leetcode.com/problems/longest-happy-prefix/description/


A string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself).

Given a string s, return the longest happy prefix of s. Return an empty string "" if no such prefix exists.

 

Example 1:

Input: s = "level"
Output: "l"
Explanation: s contains 4 prefix excluding itself ("l", "le", "lev", "leve"), and suffix ("l", "el", "vel", "evel"). The largest prefix which is also suffix is given by "l".
Example 2:

Input: s = "ababab"
Output: "abab"
Explanation: "abab" is the largest prefix which is also suffix. They can overlap in the original string.
 

Constraints:

1 <= s.length <= 105
s contains only lowercase English letters.



********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

Note:- 62 out of 79 test cases passed. Below code shows TLE in case 63. 

class Solution {
    public String longestPrefix(String s) {
        int n= s.length();
        int start=0, end=n-1;
        String s1= "", s2= "";
        String ans= "";
        while(start<n-1)
        {
            s1+= s.charAt(start);
            s2= s.charAt(end)+s2;
            
            if(s1.compareTo(s2)==0)
                ans= s1.toString();
                
            start++;
            end--;
        }
        return ans;
    }
}
