********************************************************************************************************************************************************************
                                                                              4Sum
********************************************************************************************************************************************************************

LeetCode Link:- https://leetcode.com/problems/4sum/description/


Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]
 

Constraints:

1 <= nums.length <= 200
-109 <= nums[i] <= 109
-109 <= target <= 109
Accepted
728.1K
Submissions
2M
Acceptance Rate
35.9%


********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        int n= nums.length;
        Arrays.sort(nums);
        List<List<Integer>> ansList= new ArrayList<>();
        for(int i=0; i<n-3; i++)
        {
            // int j=i;
            // while(j<n-3 && nums[i]==nums[j])
            //     j++;
            // if(j==n-3)
            //     return ansList;
            for(int j=i+1; j<n-2; j++)
            {
                long sum= nums[i]+nums[j];
                long findSum= target-sum;

                int k=j+1, l=n-1;
                while(k<l)
                {
                    if(nums[k]+nums[l]==findSum)
                    {
                        List<Integer> currList= new ArrayList<>();
                        currList.add(nums[i]);
                        currList.add(nums[j]);
                        currList.add(nums[k]);
                        currList.add(nums[l]);
                        if(!ansList.contains(currList))
                            ansList.add(currList);
                        k++;
                        l--;
                    }
                    else if(nums[k]+nums[l]<findSum)
                        k++;
                    else
                        l--;
                }
            }
        }
        return ansList;
    }
}
