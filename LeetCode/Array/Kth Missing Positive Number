********************************************************************************************************************************************************************
                                                               Kth Missing Positive Number
********************************************************************************************************************************************************************

LeetCode Link:- https://leetcode.com/problems/kth-missing-positive-number/description/


Given an array arr of positive integers sorted in a strictly increasing order, and an integer k.

Return the kth positive integer that is missing from this array.

 

Example 1:

Input: arr = [2,3,4,7,11], k = 5
Output: 9
Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.
Example 2:

Input: arr = [1,2,3,4], k = 2
Output: 6
Explanation: The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6.
 

Constraints:

1 <= arr.length <= 1000
1 <= arr[i] <= 1000
1 <= k <= 1000
arr[i] < arr[j] for 1 <= i < j <= arr.length




********************************************************************************************************************************************************************
                                                                               CODE- APPROACH 1
********************************************************************************************************************************************************************

class Solution {
    public int findKthPositive(int[] arr, int k) {
        //STEPS FOR SOLUTION:-
        //1)Taking a variable num which will be initialized as arr[0]+1
        //2)Traversing into the array from index 1 till the end of the array, checking if num is equal to arr[i] or not
        //3)If num is not equal to arr[i]- then in a while loop increment a variable count (count=0 initially)- Also if count becomes equal to k then then and there return num
        //Time Complexity: O(N)
        //Space Complexity: O(1)

        int n= arr.length;
        int num= 1;
        int count= 1;
        for(int i=0; i<n; i++)
        {
            while(num!=arr[i])
            {
               // System.out.println(num+" "+count);
                if(count==k)
                    return num;
                count++;
                num++;
            }
            num++;
        }

        while(count!=k)
        {
            count++;
            num++;
        }

        return num;
    }
}



********************************************************************************************************************************************************************
                                                                               CODE- APPROACH 2
********************************************************************************************************************************************************************

class Solution {
    public int findKthPositive(int[] arr, int k) {
        int n= arr.length;

        int max_number= Integer.MIN_VALUE;
        HashMap<Integer,Integer> map= new HashMap<>();
        for(int i=0; i<n; i++)
        {
            map.put(arr[i],1);
            max_number= Math.max(max_number,arr[i]);
        }
            
        int count=0;
        for(int i=1; i<=max_number; i++)
        {
            if(!map.containsKey(i))
                count++;
            if(count==k)
                return i;
        }
        return max_number+k-count;
    }
}
