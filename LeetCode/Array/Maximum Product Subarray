********************************************************************************************************************************************************************
                                                               Maximum Product Subarray
********************************************************************************************************************************************************************

LeetCode Link:- https://leetcode.com/problems/maximum-product-subarray/description/


Given an integer array nums, find a 
subarray
 that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 

Constraints:

1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.



********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class Solution {
    public int maxProduct(int[] nums) {
        int n= nums.length;
        if(n==0)
            return 0;
        long maxSoFar= nums[0];
        long maxHere= nums[0];
        long minHere= nums[0];
        for(int i=1; i<n; i++)
        {
            long curr= nums[i];
            long tmpMax= Math.max(Math.max(maxHere*curr,minHere*curr),curr);
            long tmpMin= Math.min(Math.min(maxHere*curr,minHere*curr),curr);
            maxHere= tmpMax;
            minHere= tmpMin;
            maxSoFar= Math.max(maxSoFar,maxHere);
        }
        return (int)maxSoFar;
    }
}
