********************************************************************************************************************************************************************
                                                                      Remove K Digits
********************************************************************************************************************************************************************

LeetCode Link:- https://leetcode.com/problems/remove-k-digits/description/


Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

 

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.
 

Constraints:

1 <= k <= num.length <= 105
num consists of only digits.
num does not have any leading zeros except for the zero itself.



********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class Solution {
    public String removeKdigits(String num, int k) {
        int n= num.length();
        Stack<Character> st= new Stack<>();
        for(int i=0; i<n; i++)
        {
            while(!st.isEmpty() && st.peek()>num.charAt(i) && k>0)
            {
                // System.out.println(st.pop());
                st.pop();
                k--;
            }
            st.push(num.charAt(i));
        }
        while(!st.isEmpty() && k>0)
        {
            st.pop();
            k--;
        }
        if(st.size()==0)
            return "0";
        
        StringBuilder result= new StringBuilder();
        while(!st.isEmpty())
            result.append(st.pop());

        String res= result.reverse().toString();
        int i=0;
        while(i<res.length() && res.charAt(i)=='0')
            i++;

        res= res.substring(i,res.length());

        if(res.length()==0)
            return "0";
        return res;
    }
}
