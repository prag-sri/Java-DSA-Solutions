********************************************************************************************************************************************************************
                                                                        Permutation in String
********************************************************************************************************************************************************************

Leetcode Problem Link:- https://leetcode.com/problems/permutation-in-string/description/


Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.



********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        //APPROACH 1: USING HASMAP
        //1)Create a hashmap of string s1
        //2)Traverse s2, creating a sliding window of size s1 string
        //3)Create initial window and store chars in map2 then update the window by removing char from left side and adding char from right side- while also checking of both hashmaps become equal at any point or not
        //Note:- Edge case- if length of s1 is greater than s2 then definitely s2 cannot contain permuatation of s1 as can never have equal no. of chars in s2

        //Time Complexity- O(26*N)

        if(s1.length()>s2.length())
            return false;

        HashMap<Character,Integer> map1= new HashMap<>();
        for(int i=0; i<s1.length(); i++)
        {
            char ch= s1.charAt(i);
            map1.put(ch,map1.getOrDefault(ch,0)+1);
        }

        HashMap<Character,Integer> map2= new HashMap<>();
        for(int i=0; i<s1.length(); i++)
        {
            char ch= s2.charAt(i);
            map2.put(ch,map2.getOrDefault(ch,0)+1);
        }

        if(map1.equals(map2))
            return true;

        int i=0;
        for(int j=s1.length(); j<s2.length(); j++)
        {
            char charAtLeft= s2.charAt(i);
            char charAtRight= s2.charAt(j);
            map2.put(charAtLeft,map2.get(charAtLeft)-1);

            if(map2.get(charAtLeft)==0)
                map2.remove(charAtLeft);

            map2.put(charAtRight,map2.getOrDefault(charAtRight,0)+1);
            i++;

            if(map1.equals(map2))
                return true;
        }

        return false;
            
    }
}
