********************************************************************************************************************************************************************
                                                              Find All Numbers Disappeared in an Array
********************************************************************************************************************************************************************

LeetCode Link:- https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/description/


Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.

 

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]
Example 2:

Input: nums = [1,1]
Output: [2]
 

Constraints:

n == nums.length
1 <= n <= 105
1 <= nums[i] <= n
 

Follow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.



********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        int n= nums.length;
        List<Integer> list= new ArrayList<>();
        HashMap<Integer,Integer> map= new HashMap<>();
        for(int i=0; i<n; i++)
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
        for(int i=1; i<=n; i++)
        {
            if(!map.containsKey(i))
                list.add(i);
        }
        return list;
    }
}
