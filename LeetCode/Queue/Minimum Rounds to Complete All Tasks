********************************************************************************************************************************************************************
                                                                   Minimum Rounds to Complete All Tasks
********************************************************************************************************************************************************************


LeetCode Link:- https://leetcode.com/problems/minimum-rounds-to-complete-all-tasks/


You are given a 0-indexed integer array tasks, where tasks[i] represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the same difficulty level.

Return the minimum rounds required to complete all the tasks, or -1 if it is not possible to complete all the tasks.

 

Example 1:

Input: tasks = [2,2,3,3,2,4,4,4,4,4]
Output: 4
Explanation: To complete all the tasks, a possible plan is:
- In the first round, you complete 3 tasks of difficulty level 2. 
- In the second round, you complete 2 tasks of difficulty level 3. 
- In the third round, you complete 3 tasks of difficulty level 4. 
- In the fourth round, you complete 2 tasks of difficulty level 4.  
It can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4.
Example 2:

Input: tasks = [2,3,3]
Output: -1
Explanation: There is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. Hence, you cannot complete all the tasks, and the answer is -1.
 

Constraints:

1 <= tasks.length <= 105
1 <= tasks[i] <= 109




********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class Solution {
    public int minimumRounds(int[] tasks) {
        //STEPS FOR SOLUTION:-
        //1)Create a Priority Queue and store all tasks[i]
        //2)Take a variable temp which will store value and freq variable will store the frequency of the temp - initially temp= pq.peek()
        //3)Use a while loop and remove peek elements from pq which are equal to temp- also keep on incrementing freq
        //4)If freq>3 then make rounds+1 and freq=0 but if freq<2 then return -1 as then no rounds possible
        //5)Change value temp and repeat process again

        int n= tasks.length;
        PriorityQueue<Integer> pq= new PriorityQueue<>();
        for(int i=0; i<n; i++)
            pq.add(tasks[i]);

        int rounds=0;
        while(!pq.isEmpty())
        {
            int temp= pq.remove(), freq=1;
            while(!pq.isEmpty() && pq.peek()==temp)
            {
                //pq.remove();
                freq++;
                System.out.println(pq.remove()+" "+freq);
            }
            if(freq<2)
                return -1;
            while(freq>=3)
            {
                freq=freq-3;
                rounds++;
            }
            if(freq!=0)
                rounds++;
            
            System.out.println("rounds="+rounds);
        }
        return rounds;
    }
}
