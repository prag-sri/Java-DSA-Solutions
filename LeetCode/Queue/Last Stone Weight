********************************************************************************************************************************************************************
                                                                        Last Stone Weight
********************************************************************************************************************************************************************


LeetCode Link:- https://leetcode.com/problems/last-stone-weight/description/

You are given an array of integers stones where stones[i] is the weight of the ith stone.

We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:

If x == y, both stones are destroyed, and
If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
At the end of the game, there is at most one stone left.

Return the weight of the last remaining stone. If there are no stones left, return 0.

 

Example 1:

Input: stones = [2,7,4,1,8,1]
Output: 1
Explanation: 
We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,
we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,
we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.
Example 2:

Input: stones = [1]
Output: 1
 

Constraints:

1 <= stones.length <= 30
1 <= stones[i] <= 1000


********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class Solution {
    public int lastStoneWeight(int[] stones) {
        //STEPS FOR SOLUTION:-
        //1)Using a Priority Queue, insert all elements of the array into the priority queue and sort the elements in reverse order i.e. descending order
        //2)Now run a while loop till the size of Priority Queue becomes less than or equal to 1
        //3)Take two elements from the Priority which will be max and sec_max- check if the values in both these variables is same then do nothing- if they are not equal then add the diff between max and sec_max into the Priority Queue
        //4)At the end of while loop return 0 if the Priority Queue is empty or return the last element present in the Priority Queue.

        int n= stones.length;
        PriorityQueue<Integer> pq= new PriorityQueue<>(Collections.reverseOrder());
        for(int i=0; i<n; i++)
            pq.add(stones[i]);

        while(pq.size()>1)
        {
            int max= pq.remove();
            int sec_max= pq.remove();
            if(max!=sec_max)
                pq.add(max-sec_max);
        }

        if(pq.size()==0)
            return 0;
        return pq.remove();
    }
}
