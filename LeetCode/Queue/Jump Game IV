********************************************************************************************************************************************************************
                                                                        Jump Game IV
********************************************************************************************************************************************************************

LeetCode Link:- https://leetcode.com/problems/jump-game-iv/description/


Given an array of integers arr, you are initially positioned at the first index of the array.

In one step you can jump from index i to index:

i + 1 where: i + 1 < arr.length.
i - 1 where: i - 1 >= 0.
j where: arr[i] == arr[j] and i != j.
Return the minimum number of steps to reach the last index of the array.

Notice that you can not jump outside of the array at any time.

 

Example 1:

Input: arr = [100,-23,-23,404,100,23,23,23,3,404]
Output: 3
Explanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.
Example 2:

Input: arr = [7]
Output: 0
Explanation: Start index is the last index. You do not need to jump.
Example 3:

Input: arr = [7,6,9,6,9,6,9,7]
Output: 1
Explanation: You can jump directly from index 0 to index 7 which is last index of the array.
 

Constraints:

1 <= arr.length <= 5 * 104
-108 <= arr[i] <= 108



********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class Solution {
    public int minJumps(int[] arr) {
        int n= arr.length;
        if(n==1)    //if length of array is 1 then cannot make any jumps
            return 0;
        
        //storing value of arr and the indices where it is present in hashmap
        HashMap<Integer,List<Integer>> map= new HashMap<>();
        for(int i=0; i<n; i++)
        {
            if(!map.containsKey(arr[i]))
            {
                List<Integer> list= new ArrayList<>();
                list.add(i);
                map.put(arr[i],list);
            }
            else
            {
                List<Integer> list= map.get(arr[i]);
                list.add(i);
                map.put(arr[i],list);
            }
        }

        //creating a queue which will keep track of all possible indices we have made jump
        Queue<Integer> q= new LinkedList<>();
        q.add(0);       //first jump on 0 element of array

        //creating a boolean array to mark whether ith element of array has been visited or not
        boolean visited[]= new boolean[n];
        visited[0]= true;   //first index has been added in queue so already visited

        //will store no. of steps required to jump to n-1th element
        int steps=0;

        while(!q.isEmpty())
        {
            int size= q.size();

            for(int i=0; i<size; i++)
            {
                int currIndex= q.poll();
                if(currIndex==n-1)
                    return steps;

                //this list will contain all indices on which we can make possible jumps
                List<Integer> possibleJumps= map.get(arr[currIndex]);
                possibleJumps.add(currIndex+1);         //we can also move one steps ahead or back
                possibleJumps.add(currIndex-1);

                for(int j=0; j<possibleJumps.size(); j++)   //exploring each index stored in possibleJumps
                {
                    int val= possibleJumps.get(j);
                    if(val>=0 && val<n && !visited[val])    //if index is valid we will store it in queue
                    {
                        q.add(val);
                        visited[val]= true;
                    }
                }
                possibleJumps.clear();
            }
            steps++;
        }
        return -1;
    }
}
