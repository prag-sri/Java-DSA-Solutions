********************************************************************************************************************************************************************
                                                                    Sliding Window Maximum
********************************************************************************************************************************************************************

LeetCode Link:- https://leetcode.com/problems/sliding-window-maximum/


You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length



********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        //n-> length of nums array
        int n= nums.length;

        //creating a deque to store max elements of window
        Deque<Integer> dq= new LinkedList<>();

        //ans array will store the max element of every window- length of window is n-k+1
        int ans[]= new int[n-k+1];

        //finding max element of first window
        int i=0;
        while(i<k)
        {
            while(!dq.isEmpty() && nums[i]>nums[dq.peekLast()])
                dq.removeLast();
            dq.addLast(i);
            i++;
        }

        //updating value of first element of ans array
        int index= 0;
        ans[index]= nums[dq.peekFirst()];
        index++;

        //finding max elements of other windows
        while(i<n)
        {
            //removing elements from dq if they are out of window
            while(!dq.isEmpty() && dq.peekFirst()<i-k+1)
                dq.removeFirst();

            //adding max elements of other windows
            while(!dq.isEmpty() && nums[i]>nums[dq.peekLast()])
                dq.removeLast();
            dq.addLast(i);
            ans[index]= nums[dq.peekFirst()];
            index++;

            i++;
        }

        //returning ans array
        return ans;
    }
}
