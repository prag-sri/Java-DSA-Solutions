********************************************************************************************************************************************************************
                                                                        Single-Threaded CPU
********************************************************************************************************************************************************************

LeetCode Link:- https://leetcode.com/problems/single-threaded-cpu/description/


You are given n​​​​​​ tasks labeled from 0 to n - 1 represented by a 2D integer array tasks, where tasks[i] = [enqueueTimei, processingTimei] means that the i​​​​​​th​​​​ task will be available to process at enqueueTimei and will take processingTimei to finish processing.

You have a single-threaded CPU that can process at most one task at a time and will act in the following way:

If the CPU is idle and there are no available tasks to process, the CPU remains idle.
If the CPU is idle and there are available tasks, the CPU will choose the one with the shortest processing time. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.
Once a task is started, the CPU will process the entire task without stopping.
The CPU can finish a task then start a new one instantly.
Return the order in which the CPU will process the tasks.

 

Example 1:

Input: tasks = [[1,2],[2,4],[3,2],[4,1]]
Output: [0,2,3,1]
Explanation: The events go as follows: 
- At time = 1, task 0 is available to process. Available tasks = {0}.
- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.
- At time = 2, task 1 is available to process. Available tasks = {1}.
- At time = 3, task 2 is available to process. Available tasks = {1, 2}.
- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.
- At time = 4, task 3 is available to process. Available tasks = {1, 3}.
- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.
- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.
- At time = 10, the CPU finishes task 1 and becomes idle.
Example 2:

Input: tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]
Output: [4,3,2,0,1]
Explanation: The events go as follows:
- At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.
- Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.
- At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.
- At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.
- At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.
- At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.
- At time = 40, the CPU finishes task 1 and becomes idle.
 

Constraints:

tasks.length == n
1 <= n <= 105
1 <= enqueueTimei, processingTimei <= 109





********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class Solution {
    public int[] getOrder(int[][] tasks) {
        //STEPS FOR SOLUTION:-
        //1)Take a variable currTime=0
        //2)Create a PriorityQueue order_pq - it will store all the tasks of CPU - store tasks object in the order_pd- tasks include start, process and index
        //3)Create another PriorityQueue process_pq - it will store all the processing tasks of CPU - elements will be in order -> process then index of tasks
        //4)Use a while loop which will run until order_pq not becomes empty - add all elements of order_pq into process_pq which are greater than currTime - also remove from order_pq - these are the tasks which are to be completed before currTime
        //5)The order of processed tasks - index of tasks is stored in ans array
        //6)Update currTime 
        
        int currTime=0, n= tasks.length, k=0;
        int ans[]= new int[n];

        PriorityQueue<Task> order_pq= new PriorityQueue<>(Comparator.comparingInt(t -> t.start));
        for(int i=0; i<n; i++)
        {
            Task t1= new Task(tasks[i][0],tasks[i][1],i);
            order_pq.add(t1);
        }

        PriorityQueue<Task> process_pq= new PriorityQueue<>((a,b) -> a.process==b.process?(a.index>b.index?1:-1):(a.process>b.process?1:-1));

        while(!order_pq.isEmpty())
        {
            while(!order_pq.isEmpty() && order_pq.peek().start<=currTime)
                process_pq.add(order_pq.poll());

            if(!process_pq.isEmpty())
            {
                Task t= process_pq.poll();
                ans[k]= t.index;
                currTime= currTime+ t.process;
                k++;
            }
            else
                currTime= order_pq.peek().start;
        }

        while(!process_pq.isEmpty())
        {
            Task t= process_pq.poll();
            ans[k]= t.index;
            k++;
        }
        return ans;
    }
    static class Task
{
    int start;
    int process;
    int index;
    Task(int start, int process, int index)
    {
        this.start= start;
        this.process= process;
        this.index= index;
    }
}
}
