********************************************************************************************************************************************************************
                                                              Check Completeness of a Binary Tree
********************************************************************************************************************************************************************

LeetCode Link:- https://leetcode.com/problems/check-completeness-of-a-binary-tree/description/



Input: root = [1,2,3,4,5,6]
Output: true
Explanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.
Example 2:


Input: root = [1,2,3,4,5,null,7]
Output: false
Explanation: The node with value 7 isn't as far left as possible.
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
1 <= Node.val <= 1000


********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isCompleteTree(TreeNode root) {
        if(root==null)
            return true;
        Queue<TreeNode> q= new LinkedList<>();
        q.add(root);
        boolean nullBetween= false;
        while(!q.isEmpty())
        {
            int size= q.size();
            while(size--> 0)
            {
                TreeNode tmp= q.remove();
                if(tmp==null)
                    nullBetween= true;
                else
                {
                    if(nullBetween)
                        return false;
                    q.add(tmp.left);
                    q.add(tmp.right);
                } 
            }
        }
        return true;
    }
}
