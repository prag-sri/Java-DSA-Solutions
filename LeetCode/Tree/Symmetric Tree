********************************************************************************************************************************************************************
                                                                       Symmetric Tree
********************************************************************************************************************************************************************

LeetCode Link:- https://leetcode.com/problems/symmetric-tree/description/


Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).


Example 1:

Input: root = [1,2,2,3,4,4,3]
Output: true


Example 2:

Input: root = [1,2,2,null,3,null,3]
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100
 

Follow up: Could you solve it both recursively and iteratively?



********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        return check(root.left,root.right);
    }
    public boolean check(TreeNode head1, TreeNode head2){
        if(head1==null)
        {
            if(head2==null)
                return true;
            return false;
        }
        if(head2==null)
            return false;

        if(head1.val!=head2.val)
            return false;

        boolean a1= check(head1.left,head2.right);
        boolean a2= check(head1.right,head2.left);

        return a1 && a2;
    }
}
