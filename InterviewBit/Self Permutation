********************************************************************************************************************************************************************
                                                                        Self Permutation
********************************************************************************************************************************************************************

InterviewBit Link:- https://www.interviewbit.com/problems/self-permutation/


You are given two strings A and B.
Check whether there exists any permutation of both A and B such that they are equal.
Return a single integer 1 if its exists, 0 otherwise.

Problem Constraints
1 <= |A|, |B| <= 105
Both strings contain only lowercase english alphabets.

Input Format
The first argument is the string A. The second argument is the string B.

Output Format
Return a single integer 1 if a permutation exists, 0 otherwise.

Example Input
Input 1: A = 'scaler'
         B = 'relasc'
Input 2: A = 'scaler'
         B = 'interviewbit'

Example Output
Output 1: 1
Output 2: 0

Example Explanation
Explanation 1: We can rearrange the second string to 'scaler', hence, a permuation exists.
Explanation 2: The given length of the two strings itself is different. There is no possible permutation.


********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

public class Solution {
    public int permuteStrings(String A, String B) {
        int n1= A.length();
        int n2= B.length();
        if(n1!=n2)
            return 0;
            
        HashMap<Character,Integer> map1= new HashMap<>();
        for(int i=0; i<n1; i++)
            map1.put(A.charAt(i),map1.getOrDefault(A.charAt(i),0)+1);
        
        HashMap<Character,Integer> map2= new HashMap<>();
        for(int i=0; i<n2; i++)
            map2.put(B.charAt(i),map2.getOrDefault(B.charAt(i),0)+1);
            
        if(map1.equals(map2))
            return 1;
        return 0;
    }
}
